


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}




model User {

  id         String    @id @default(uuid())
  email      String    @unique @db.VarChar(255)
  username   String    @unique @db.VarChar(50)
  password   String?    @db.VarChar(255)

  isVerified Boolean   @default(false)
  otpCode    Int?
  otpExpiry  DateTime?
  role       Role?      @default(LEARNER)
  status:    Status?    @default(PENDING)
  image      String?   @db.VarChar(255)

  
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  accounts   Account[]
  sessions   Session[]
  tokens     PasswordResetToken[]

  mentor     Mentor[]

}



enum Role {
    MENTOR
    LEARNER
  }

  enum Status {
     PENDING
     APPROVED 
     REJECTED
  }




model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}






model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  ipAddress    String?
  userAgent    String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model PasswordResetToken {
  id          String    @id @default(uuid())
  userId      String    
  token       String @unique
  expiresAt   DateTime
  user        User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}




model Mentor {
    
    id                String        @id @default(cuid()) 
    userId            String
    name              String?        @db.VarChar(100)
    email             String?        @unique @db.VarChar(100)
    phonenumber       String?        @unique @db.VarChar(20)
    bio               String?
    country           String?        @db.VarChar(50)
    schoolName        String?        @db.VarChar(100)
    graduationYear    Int?
    company           String?        @db.VarChar(100)
    guidefor          String?        @db.VarChar(255)       
    profileUrl        String?
    idcardUrl         String?        
    readyForMentorship  MentorshipStatus?
    
    skills            String?        @db.VarChar(300)

    linkedInUrl       String?        @db.VarChar(255)
    xUrl              String?        @db.VarChar(255)

    rating             Float?        @default(0.0)
    reviewCount        Int?          @default(0)




    createdAt          DateTime      @default(now())
    updatedAt          DateTime      @updatedAt
    
    user               User @relation(fields:[userId],references: [id], onDelete: Cascade)

    @@index([email])
    @@index([userId])
    @@index([university])
    @@index([guidefor])
    @@index([company])
 
}

 enum MentorshipStatus {
     YES
     NO
  }




model Learner {

  id               String         @unique @id @default(cuid())
  name             String         @db.VarChar(50)
  email            String         @unique @db.VarChar(255)
  phonenumber      String?        @unique @db.VarChar(20)
  country          String?        @db.VarChar(50)
  educationLevel   String?        @db.VarChar(50)
  schoolName       String?        @db.VarChar(50)
  schoolCardUrl    String?       
  profileUrl       String?        
  mentorshipType   String?        @db.VarChar(50)
  bio              String?        @db.VarChar(255)

  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  
  userId           String?
  user             User @relation(fields:[userId], references: [id], onDelete: Cascade)


  @@index([email])
  @@index([userId])
  @@index([mentorshipType])


} 
